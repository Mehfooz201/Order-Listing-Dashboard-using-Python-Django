# Generated by Django 4.2.3 on 2023-07-29 11:52

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_number', models.AutoField(primary_key=True, serialize=False)),
                ('customer_name', models.CharField(max_length=100)),
                ('manufacturer', models.CharField(max_length=100)),
                ('order_type', models.CharField(choices=[('Regular', 'Regular Order'), ('Simple', 'Sample Order'), ('Urgent', 'Urgent order')], default='Regular', max_length=10)),
                ('purchaser', models.CharField(max_length=100)),
                ('salesman', models.CharField(max_length=100)),
                ('requirements_remarks', models.TextField()),
                ('order_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('contacts', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('country', models.CharField(choices=[('India', 'India'), ('USA', 'USA'), ('Pakistan', 'Pakistan'), ('Bangladesh', 'Bangladesh'), ('Russia', 'Russia'), ('China', 'China')], default='India', max_length=20)),
                ('receiving_address', models.TextField()),
                ('order_status', models.CharField(blank=True, choices=[('active', 'Active'), ('complete', 'Complete'), ('cancelled', 'Cancelled'), ('modification', 'Modification')], default='active', max_length=12, null=True)),
                ('original_data', models.CharField(choices=[('Completed Design', 'Completed Design Data'), ('Physical Impression', 'Physical Impression'), ('Raw Scanned Data', 'Raw Scanned Data')], default='Completed Design', max_length=20)),
                ('typesetting_printing', models.CharField(choices=[('Nesting & Slicing & Printing', 'Nesting & Slicing & Printing'), ('Nesting & Slicing', 'Nesting & Slicing')], default='Nesting & Slicing & Printing', max_length=50)),
                ('product_type', models.CharField(choices=[('Anatomic Full Crown', 'Anatomic Full Crown '), ('Veneer ( Emax, Ivoclar)', 'Veneer ( Emax, Ivoclar)'), ('Inlay/Onlay', 'Inlay/Onlay'), ('Smile Creator', 'Smile Creator'), ('Acrylic Temporary Crowns', 'Acrylic Temporary Crowns'), ('Inlay/Onlay', 'Inlay/Onlay'), ('Custom Implant Abutment', 'Custom Implant Abutment'), ('Cobalt-chrome framework', 'Cobalt-chrome framework'), ('Titanium Full Contour Crown (TC4)', 'Titanium Full Contour Crown (TC4)'), ('Titanium Framework (TC4)', 'Titanium Framework (TC4)')], default='Anatomic Full Crown', max_length=100)),
                ('product_sub_type', models.CharField(choices=[('Cast Partial Denture Framework (upto 3 unit single arch)', 'Cast Partial Denture Framework (upto 3 unit single arch)'), ('Cast Partial Denture Framework (upto 6 unit single arch)', 'Cast Partial Denture Framework (upto 6 unit single arch)'), ('Cast Partial Denture Framework (upto 13 unit single arch)', 'Cast Partial Denture Framework (upto 13 unit single arch)'), ('Screw retained crown', 'Screw Retained Crown'), ('All on 4/6 implants', 'All on 4/6 implants'), ('Implant SLM malo bridge', 'Implant SLM Malo Bridge '), ('Implant Hybrid Denture', 'Implant Hybrid Denture'), ('Cast Partial Obturator', 'Cast Partial Obturator'), ('Bridge Framework', 'Bridge Framework'), ('Bite Splint', 'Bite Splint'), ('Full Mouth Rehabilitation', 'Full Mouth Rehabilitation'), ('Wax-up for smile correction', 'Wax-up for smile correction ')], default='Cast Partial Denture Framework (upto 3 unit single arch)', max_length=100)),
                ('product_material', models.CharField(choices=[('OCOR', 'OCOR'), ('Metal ', 'Metal'), ('Resin', 'Resin'), ('Zirconia / Metal / PMMA ', 'Zirconia / Metal / PMMA '), ('Zirconia / Emax', 'Zirconia / Emax'), ('Wax', 'Wax'), ('PMMA', 'PMMA'), ('Zirconia / Metal', 'Zirconia / Metal ')], default='OCOR', max_length=50)),
                ('model_design', models.CharField(choices=[('Contact Model ( each quadrant )', 'Contact Model ( each quadrant )'), ('Contact Model with extra die  ( each quadrant )', 'Contact Model with extra die  ( each quadrant )'), ('Models with articulation (uppr/lower)', 'Models with articulation (uppr/lower)'), ('Study Model (Full Mouth)', 'Study Model (Full Mouth)'), ('Surgical guide ', 'Surgical Guide')], default='Contact Model ( each quadrant )', max_length=50)),
                ('unit_of_measurement', models.CharField(choices=[('PCS', 'PCS')], default='PCS', max_length=10)),
                ('currency', models.CharField(choices=[('USA', 'USA ($)'), ('INR', 'INR (Indian Rupees)')], default='INR', max_length=10)),
                ('quantity', models.IntegerField()),
                ('delivery_timing', models.CharField(choices=[('12HRS', '12 HRS'), ('6HRS', '6 HRS'), ('2HRS', '2 HRS')], default='12HRS', max_length=10)),
                ('file_upload_required', models.FileField(upload_to='uploads/files/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'verbose_name_plural': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('avatar', models.ImageField(default='avatar.svg', null=True, upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
