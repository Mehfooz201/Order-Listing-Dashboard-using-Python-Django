# Generated by Django 4.2.3 on 2023-07-28 09:54

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=100)),
                ('manufacturer', models.CharField(max_length=100)),
                ('order_type', models.CharField(choices=[('Regular', 'Regular order'), ('Simple', 'Simple Order'), ('Urgent', 'Urgent order')], max_length=10)),
                ('purchaser', models.CharField(max_length=100)),
                ('salesman', models.CharField(max_length=100)),
                ('production', models.CharField(max_length=100)),
                ('requirements_remarks', models.TextField()),
                ('contacts', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('country', models.CharField(choices=[('USA', 'USA'), ('India', 'India'), ('Pakistan', 'Pakistan'), ('Bangladesh', 'Bangladesh'), ('Russia', 'Russia'), ('China', 'China')], max_length=20)),
                ('receiving_address', models.TextField()),
                ('original_data', models.CharField(choices=[('Completed Design', 'Completed Design data'), ('Physical Impression', 'Physical Impression'), ('Raw Scanned Data', 'Raw Scanned Data')], max_length=20)),
                ('typesetting_printing', models.CharField(choices=[('Nesting & Slicing & Printing', 'Nesting & Slicing & Printing'), ('Nesting & Slicing', 'Nesting & Slicing')], max_length=50)),
                ('product_type', models.CharField(choices=[('Cobalt-chrome full contour Crown', 'Cobalt-chrome full contour Crown'), ('Cobalt-chrome framework', 'Cobalt-chrome framework'), ('Titanium Full Contour Crown (TC4)', 'Titanium Full Contour Crown (TC4)'), ('Titanium Framework (TC4)', 'Titanium Framework (TC4)')], max_length=100)),
                ('product_sub_type', models.CharField(choices=[('Cast Partial Denture Framework (upto 3 unit single arch)', 'Cast Partial Denture Framework (upto 3 unit single arch)'), ('Cast Partial Denture Framework (upto 6 unit single arch)', 'Cast Partial Denture Framework (upto 6 unit single arch)'), ('Cast Partial Denture Framework (upto 13 unit single arch)', 'Cast Partial Denture Framework (upto 13 unit single arch)')], max_length=100)),
                ('product_material', models.CharField(max_length=50)),
                ('unit_of_measurement', models.CharField(choices=[('PCS', 'PCS')], max_length=10)),
                ('currency', models.CharField(choices=[('USA', 'USA'), ('INR', 'INR (Indian Rupees)')], max_length=10)),
                ('quantity', models.IntegerField()),
                ('num_of_files', models.IntegerField()),
                ('delivery_timing', models.CharField(choices=[('12HRS', '12 HRS'), ('6HRS', '6 HRS'), ('2HRS', '2 HRS')], max_length=10)),
                ('file_upload_required', models.FileField(upload_to='uploads/files/')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('avatar', models.ImageField(default='avatar.svg', null=True, upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
